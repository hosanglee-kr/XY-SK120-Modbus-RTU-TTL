/* Custom CSS overrides */

/* Fix for partial white background in all viewport sizes */
html {
  min-height: 100vh !important;
  background-color: var(--color-white) !important; /* Use CSS variable */
}

.dark html {
  background-color: var(--color-gray-900) !important; /* Use CSS variable */
}

body {
  min-height: 100vh !important;
  background-color: var(--color-white) !important; /* Use CSS variable */
  background-attachment: fixed !important; /* Prevent background from scrolling */
}

.dark body {
  background-color: var(--color-gray-900) !important; /* Use CSS variable */
}

/* Adjust all default text to use dark gray instead of black */
body, p, span, button, input, select, textarea {
  color: var(--color-gray-800);
}

.dark body, .dark p, .dark span, .dark button, .dark input, .dark select, .dark textarea {
  color: var(--color-gray-200);
}

/* Default text color override */
.text-black {
  color: var(--color-gray-800) !important;
}

.dark .text-black {
  color: var(--color-gray-200) !important;
}

/* Make labels slightly darker but not pure black */
label {
  color: var(--color-gray-800);
}

.dark label {
  color: var(--color-gray-200);
}

/* Default heading color override */
h1, h2, h3, h4, h5, h6 {
  color: var(--color-gray-800);
}

.dark h1, .dark h2, .dark h3, .dark h4, .dark h5, .dark h6 {
  color: var(--color-gray-200);
}

/* Main application wrapper needs proper background and full height */
.min-h-full {
  min-height: 100vh !important;
  background-color: inherit !important; /* Inherit from body */
}

/* Ensure consistent background color across viewport */
main.flex-1 {
  background-color: var(--color-white) !important; /* Use CSS variable */
  flex-grow: 1 !important;
}

.dark main.flex-1 {
  background-color: var(--color-gray-900) !important; /* Use CSS variable */
}

/* Force all parent containers to have background color */
#app, .flex-col {
  background-color: var(--color-white) !important; /* Use CSS variable */
}

.dark #app, .dark .flex-col {
  background-color: var(--color-gray-900) !important; /* Use CSS variable */
}

/* Ensure footer has the same background color */
footer {
  background-color: inherit !important;
}

/* Minimal custom CSS for log viewer - only what can't be done with Tailwind */
#log-viewer-overlay::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -1;
    @apply bg-white dark:bg-gray-800;
}

/* Key log viewer styles for proper visibility */
#log-viewer-overlay.active {
    transform: translateY(0) !important;
    -webkit-transform: translateY(0) !important;
    display: block !important;
    visibility: visible !important;
}

/* Make sure the active class has higher specificity */
html body #log-viewer-overlay.active {
    transform: translateY(0) !important;
}

/* Ensure log buttons are visible */
#log-viewer-overlay button svg {
    stroke-width: 2;
    color: inherit;
}

/* Add fallback color if Tailwind classes fail */
#log-viewer-overlay button {
  color: var(--color-primary); /* Use CSS variable instead of hardcoded blue-500 */
}

/* Ensure content is pushed to the very bottom - can't be represented with Tailwind */
body.log-viewer-open {
    padding-bottom: 33.33vh;
}

/* Add pulse animation for the heartbeat indicator */
@keyframes pulse {
    0% { opacity: 0.4; }
    50% { opacity: 1; }
    100% { opacity: 0.4; }
}

/* Make the dot pulse properly */
.auto-refresh-indicator .dot {
    transition: opacity 0.2s ease-in-out;
}

.auto-refresh-indicator .dot {
    animation: pulse 1.5s infinite;
}

/* Rest of your custom CSS for other components... */
