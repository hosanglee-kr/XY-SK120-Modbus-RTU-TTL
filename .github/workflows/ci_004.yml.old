# .github/workflows/pr.yml
name: PR

on:
  pull_request:
    branches: [main] # Pull Request가 main 브랜치를 대상으로 할 때 실행
    paths:
      - 'platformio.ini'
      - '.github/**/*.yml'
      - 'lib/**'
      - 'include/**'
      # - 'data/**'
      - 'src/**/*.c'
      - 'src/**/*.cpp'
      - 'src/**/*.h'
      - 'src/**/*.ino'
      
      # - '**/*.c'
      # - '**/*.cpp'
      # - '**/*.h'
      # - '**/*.ino'

jobs:
  # Step 1: platformio.ini에서 환경 목록 가져오기
  get_environments:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.read_output.outputs.envs }} # Job 출력이 read_output Step의 출력(envs)을 참조하도록 변경

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # pip 캐시 설정 (platformio.ini 변경 시 캐시 무효화)
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('platformio.ini') }} # 변경 제안: platformio.ini 파일 해시 사용
          restore-keys: |
            ${{ runner.os }}-pip-

      # PlatformIO 캐시 설정 (platformio.ini 변경 시 캐시 무효화)
      - name: Cache PlatformIO core and platforms/libraries
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio
            .pio/build_cache
          key: ${{ runner.os }}-platformio-${{ hashFiles('platformio.ini') }} # 변경 제안: platformio.ini 파일 해시 사용, 키 이름 명확화
          restore-keys: |
            ${{ runner.os }}-platformio-

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: List PlatformIO environments
        id: list_envs
        run: |
          python -c "
          import configparser
          import json
          import sys
          config = configparser.ConfigParser()
          config.read('platformio.ini')
          envs = []
          for section in config.sections():
              if section.startswith('env:'):
                  envs.append(section.split(':', 1)[1])
          print(json.dumps(envs))
          " > envs.json
        shell: bash

      - name: Read environments to output
        id: read_output
        run: |
          ENVS=$(<envs.json)
          echo "envs=${ENVS}" >> $GITHUB_OUTPUT
        shell: bash

  # Step 2: 가져온 환경 목록을 사용하여 빌드 실행
  build:
    runs-on: ubuntu-latest
    needs: get_environments # 이 Job은 get_environments Job이 먼저 완료되어야 함

    strategy:
      fail-fast: false
      matrix:
        environments: ${{ fromJson(needs.get_environments.outputs.environments) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 캐싱 및 Python/PlatformIO 설정 단계는 get_environments Job과 동일하게 유지
      # (개별 Job은 독립적으로 실행되므로 종속성 설정을 해줘야 함)

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('platformio.ini') }} # 변경 제안
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache PlatformIO core and platforms/libraries
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio
            .pio/build_cache
          key: ${{ runner.os }}-platformio-${{ hashFiles('platformio.ini') }} # 변경 제안
          restore-keys: |
            ${{ runner.os }}-platformio-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Run PlatformIO build for ${{ matrix.environments }}
        env:
          VERSION: "0.0.${{ github.event.number }}" # 환경 변수 설정 (PR 번호 사용)
        run: pio run -e ${{ matrix.environments }}

      - name: Build filesystem image for ${{ matrix.environments }}
        env:
          VERSION: "0.0.${{ github.event.number }}"
        run: pio run -e ${{ matrix.environments }} --target buildfs
        continue-on-error: true

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.environments }}-firmware.bin
          path: .pio/build/${{ matrix.environments }}/firmware*.bin

      - name: Upload littlefs artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.environments }}-littlefs.bin
          path: .pio/build/${{ matrix.environments }}/littlefs.bin

      - name: Upload partitions artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.environments }}-partitions.bin
          path: .pio/build/${{ matrix.environments }}/partitions.bin

      - name: Upload bootloader artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.environments }}-bootloader.bin
          path: .pio/build/${{ matrix.environments }}/bootloader.bin  
